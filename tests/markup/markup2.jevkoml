`/xml/<!doctype html>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />/xml/

style [
  `//pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
  }
pre.numberSource { margin-left: 3em;  padding-left: 4px; }
div.sourceCode
  { color: #cccccc; background-color: #303030; }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ffcfaf; } /* Alert */
code span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */
code span.at { } /* Attribute */
code span.bn { color: #dca3a3; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #f0dfaf; } /* ControlFlow */
code span.ch { color: #dca3a3; } /* Char */
code span.cn { color: #dca3a3; font-weight: bold; } /* Constant */
code span.co { color: #7f9f7f; } /* Comment */
code span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */
code span.do { color: #7f9f7f; } /* Documentation */
code span.dt { color: #dfdfbf; } /* DataType */
code span.dv { color: #dcdccc; } /* DecVal */
code span.er { color: #c3bf9f; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #c0bed1; } /* Float */
code span.fu { color: #efef8f; } /* Function */
code span.im { } /* Import */
code span.in { color: #7f9f7f; font-weight: bold; } /* Information */
code span.kw { color: #f0dfaf; } /* Keyword */
code span.op { color: #f0efd0; } /* Operator */
code span.ot { color: #efef8f; } /* Other */
code span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */
code span.sc { color: #dca3a3; } /* SpecialChar */
code span.ss { color: #cc9393; } /* SpecialString */
code span.st { color: #cc9393; } /* String */
code span.va { } /* Variable */
code span.vs { color: #cc9393; } /* VerbatimString */
code span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */
body {
  background-color: black;
  color: white;
}
.main {
  display: flex;
  font-family: monospace;
}
div.sourceCode {
  max-width: 23rem;
  white-space: pre-wrap;
  margin: 0.5rem;
  background-color: #111;
  padding: 0.5rem;
  border-radius: 0.5rem;
}
h1 {
  text-align: center;
}
//
]

# [anatomy of a jevko]


p [This is an informal description of the various elements of the Jevko syntax.]

p [The name \em [Jevko] /ˈdʒef.kɔ/ is derived from Polish \em[drzewko] /ˈdʐɛf.kɔ/, meaning \em[small tree].]

p [This relates to the fact that Jevko is meant to be a minimal syntax for simple flexible tree structures.]

p [We shall call a specific instance of a Jevko tree a \jevko[.[inline]jevko].]

p [An example of a jevko looks like this:]

pre [
jevko `//first name [string]
last name [string]
is alive [boolean]
age [integer]
address [
  street address [string]
  city [string]
  state [string]
  postal code [string]
]
children [list]
spouse []
object//
]

p [We will now break this example down and identify and name its parts.]

## [top jevko]

p [Notice that the jevko is not wrapped in square brackets. A jevko which is not wrapped in square brackets is the \em[top] or \em[top-level] jevko.]

## [jevko parts: subjevkos and suffix]

p [A jevko is made out of a number of \sub[.[inline]subjevkos] followed by a \suf[.[inline]suffix]:]

pre [
sub `//first name [string]//
sub `//last name [string]//
sub `//is alive [boolean]//
sub `//age [number]//
sub `//address [
  street address [string]
  city [string]
  state [string]
  postal code [string]
]//
sub `//children [array]//
sub `//spouse []//
suf `//object//
]

## [subjevko parts: prefix and jevko]

p [A \sub[.[inline]subjevko] is a kind of a name-value pair:]

pre [
  sub `//first name [string]//
]

p [
  A subjevko is made out of a \prefix[.[inline]prefix] followed by a \jevko[.[inline]jevko] wrapped in \`//[square brackets]//:
]
